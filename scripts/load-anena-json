#! /usr/bin/env python3

####################################################################################################
#
# SnowAvalancheData - 
# Copyright (C) 2021 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
####################################################################################################

from enum import Enum
from pathlib import Path
from pprint import pprint

import matplotlib.pyplot as plt

from SnowAvalancheData.Data import Accidents, Accident
from SnowAvalancheData.Data.DataType import *
from SnowAvalancheData.Plot import Figure
from SnowAvalancheData.Statistics.Histogram import Histogram, EnumHistogram, Binning1D, Interval

####################################################################################################

path = Path('data').joinpath('anena-accidents.json')
print('Load {path}')
accidents = Accidents.load_json(path)

filtered_accidents = accidents.and_filter(
    activity=lambda _: _ in (Activity.HIKING, Activity.MOUNTAINEERING),
)

attribute_bin_width = {
    'altitude': 250,   # m
    'height_difference': 100,   # m
    'length': 100,   # m
    'rescue_delay': 20,   # min
    'thickness_max': 20,   # cm
    'width': 15,   # m
}

attribute_title = {
    'orientation': 'Slope Orientation',
    'move_direction': 'Moving Direction',
}

print('Create histograms')
histograms = {}
for attribute, type_ in Accident.ATTRIBUTE_TYPE.items():
    title = attribute_title.get(attribute, attribute.replace('_', ' '))
    unit = Accident.ATTRIBUTE_UNIT.get(attribute, '')
    if issubclass(type_, Enum):
        histograms[attribute] = EnumHistogram(type_, title=title, unit=unit)
    elif type_ in (int, float):
        print(f'  Scan inf/sup for {attribute}')
        inf, sup = filtered_accidents.inf_sup(attribute)
        sup += 1
        bin_width = attribute_bin_width.get(attribute, 1)
        print(f'{attribute} [{inf}, {sup}] bw = {bin_width}')
        histograms[attribute] = Histogram(binning=Binning1D(Interval(inf, sup), bin_width=bin_width), title=title, unit=unit)

print('Fill histograms')
for accident in filtered_accidents:
    # pprint(accident.__dict__)
    for attribute, histogram in histograms.items():
        value = getattr(accident, attribute)
        if value is not None:
            histogram.fill(value)

for attribute, histogram in histograms.items():
    histogram.normalise(to_percent=True, clone=False)

# for attribute, histogram in histograms.items():
#     print("="*100)
#     print(attribute)
#     print(histogram)

####################################################################################################

print('Plot...')

# histogram = histograms['bra_level']
# print(histogram)
# # print(histogram.to_graph())
# c = histogram.normalise(scale=100)
# print(c)
# c = histogram.cumulative(normalise=False)
# print(c)
# c = histogram.cumulative(normalise=True)
# print(c)

def plot_histogram(figure, attribute):
    histogram = histograms[attribute]
    match attribute:
        case 'bra_level' | 'departement':
            figure.bar_number(histogram)
        case 'orientation':
            figure.polar_bar(histogram)
        case _:
            match histogram:
               case EnumHistogram():
                   figure.bar(histogram)
               case Histogram():
                   figure.histogram(histogram)

figure1 = Figure(number_of_rows=2, number_of_columns=3)
for attribute in (
        'activity',
        'altitude',
        'departement',   # -> map
        # 'date',
        'gear',
):
    plot_histogram(figure1, attribute)

figure2 = Figure(number_of_rows=2, number_of_columns=4)
for attribute in (
        'bra_level',
        'move_direction',
        'orientation',
        'snow_cohesion',
        #
        'snow_quality',
        'start_reason',
        'start_type',
        # 'inclination',
):
    plot_histogram(figure2, attribute)

figure3 = Figure(number_of_rows=2, number_of_columns=2)
for attribute in (
        'length',
        'width',
        #
        'height_difference',
        'thickness_max',
):
    plot_histogram(figure3, attribute)

figure4 = Figure(number_of_rows=3, number_of_columns=4)
for attribute in (
        'number_of_persons',
        'safe',
        'injured',
        'dead',
        #
        'carried_away',
        'partial_bluried_non_critical',
        'partial_bluried_critical',
        #
        'head_bluried',
        'full_bluried',
):
    plot_histogram(figure4, attribute)

figure5 = Figure(number_of_rows=2, number_of_columns=2)
for attribute in (
        'alert_device',
        'alert_person',
        #
        'rescue_delay',
        # 'doctor_on_site',
):
    plot_histogram(figure5, attribute)

# figures = {key: value for key, value in globals().items() if isinstance(value, Figure)}
# for name, figure in figures.items():
#     figure.save(f'{name}.svg')

print('Show...')
plt.show()
